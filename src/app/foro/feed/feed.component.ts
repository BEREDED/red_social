// feed.component.ts
import { Component, OnInit, HostListener } from '@angular/core';
import { Post, Comment } from '../../modelos/post.interface';

// Interfaces definidas directamente en el componente

@Component({
  selector: 'app-feed',
  templateUrl: './feed.component.html',
  styleUrls: ['./feed.component.scss'],
  standalone: false,
})
export class FeedComponent implements OnInit {
  posts: Post[] = [];
  isLoading = false;
  page = 1;
  hasMorePosts = true;

  // Para comentarios
  commentTexts: { [postId: string]: string } = {};

  ngOnInit(): void {
    this.loadInitialPosts();
  }

  loadInitialPosts(): void {
    this.isLoading = true;

    setTimeout(() => {
      this.posts = this.generateMockPosts(10);
      this.isLoading = false;
    }, 500);
  }

  loadMorePosts(): void {
    if (this.isLoading || !this.hasMorePosts) return;

    this.isLoading = true;

    setTimeout(() => {
      const newPosts = this.generateMockPosts(5, this.posts.length);
      this.posts = [...this.posts, ...newPosts];
      this.page++;

      // Simular que no hay m√°s posts despu√©s de cargar muchos
      if (this.posts.length > 50) {
        this.hasMorePosts = false;
      }

      this.isLoading = false;
    }, 800);
  }

  @HostListener('scroll', ['$event'])
  onScroll(event: Event): void {
    const element = event.target as HTMLElement;
    const scrollTop = element.scrollTop;
    const scrollHeight = element.scrollHeight;
    const clientHeight = element.clientHeight;

    // Cargar m√°s cuando est√© cerca del final (100px antes)
    if (scrollTop + clientHeight >= scrollHeight - 100) {
      this.loadMorePosts();
    }
  }

  generateMockPosts(count: number, startIndex: number = 0): Post[] {
    const authors = [
      'Mar√≠a Gonz√°lez', 'Carlos Rodr√≠guez', 'Ana Mart√≠nez', 'Luis Garc√≠a',
      'Carmen L√≥pez', 'Jos√© Hern√°ndez', 'Laura P√©rez', 'Miguel Torres',
      'Elena Ruiz', 'David Morales', 'Isabel Jim√©nez', 'Antonio Mu√±oz'
    ];

    const contents = [
      '¬°Hola a todos! ¬øC√≥mo est√°n pasando su d√≠a? Espero que muy bien üòä',
      'Acabo de terminar mi proyecto final. ¬°Qu√© alivio! Ya era hora de descansar un poco.',
      'Compartiendo algunos pensamientos sobre el nuevo curso que empec√©. Muy interesante hasta ahora.',
      '¬øAlguien m√°s est√° emocionado por el fin de semana? Ya tengo planes incre√≠bles.',
      'Reflexionando sobre los cambios que he hecho este a√±o. Ha sido todo un viaje.',
      'Buenos d√≠as comunidad. Espero que tengan un excelente d√≠a lleno de logros.',
      'Pregunta para ustedes: ¬øcu√°l ha sido su mayor aprendizaje este mes?',
      'Compartiendo un momento de gratitud. Agradecido por todas las oportunidades.',
      'Termin√© de leer un libro incre√≠ble. Las recomendaciones siempre son bienvenidas.',
      '¬°Por fin viernes! ¬øQu√© planes tienen para relajarse?',
      'Motivaci√≥n del d√≠a: cada peque√±o paso cuenta hacia nuestros objetivos.',
      'Reflexi√≥n matutina: la perseverancia siempre da frutos al final.',
    ];

    return Array.from({ length: count }, (_, i) => {
      const randomAuthor = authors[Math.floor(Math.random() * authors.length)];
      const randomContent = contents[Math.floor(Math.random() * contents.length)];
      const randomDate = new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000);

      return {
        id: `post-${startIndex + i + 1}`,
        author: randomAuthor,
        content: randomContent,
        createdAt: randomDate,
        comments: this.generateMockComments(Math.floor(Math.random() * 4)) // 0-3 comentarios
      };
    });
  }

  generateMockComments(count: number): Comment[] {
    const authors = ['Pedro Silva', 'Luc√≠a Moreno', 'Roberto Castro', 'Andrea Vega'];
    const comments = [
      '¬°Totalmente de acuerdo!',
      'Muy buen punto, gracias por compartir.',
      'Interesante perspectiva.',
      '¬°Excelente! Me gusta tu enfoque.',
      'Gracias por la inspiraci√≥n.',
      '¬°Qu√© genial! Felicidades.',
    ];

    return Array.from({ length: count }, (_, i) => ({
      id: `comment-${Date.now()}-${i}`,
      author: authors[Math.floor(Math.random() * authors.length)],
      content: comments[Math.floor(Math.random() * comments.length)],
      createdAt: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000)
    }));
  }

  canComment(postId: string): boolean {
    const content = this.commentTexts[postId] || '';
    return content.trim().length > 0 && content.length <= 300;
  }

  onComment(postId: string): void {
    const content = this.commentTexts[postId];
    if (!this.canComment(postId)) return;

    const post = this.posts.find(p => p.id === postId);
    if (post) {
      const newComment: Comment = {
        id: `comment-${Date.now()}`,
        author: 'T√∫', // En producci√≥n ser√≠a el usuario actual
        content: content.trim(),
        createdAt: new Date()
      };

      post.comments.push(newComment);
      this.commentTexts[postId] = '';
    }
  }

  getTimeAgo(date: Date): string {
    const now = new Date();
    const diffInMs = now.getTime() - date.getTime();
    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));
    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));

    if (diffInMinutes < 1) return 'Ahora';
    if (diffInMinutes < 60) return `${diffInMinutes}m`;
    if (diffInHours < 24) return `${diffInHours}h`;
    if (diffInDays < 7) return `${diffInDays}d`;

    return date.toLocaleDateString();
  }
}
